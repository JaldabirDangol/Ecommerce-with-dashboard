generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING       
  PAID         
  PROCESSING   
  SHIPPED      
  DELIVERED    
  CANCELLED    
  REFUNDED     
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User     @relation(fields: [userId], references: [id])
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  name             String?
  username         String?      @unique
  phoneNumber      String?      @unique
  role             Role         @default(USER)
  cartItem         Cart?
  reviews          Review[]
  orders           Order[]     
  address          Address[]
  wishlist         Wishlist?
  sessions         Session[]
  account          Account[]

  defaultAddressId String?      @unique
  shippingAddressId String?     @unique

  defaultAddress   Address?     @relation("DefaultAddress", fields: [defaultAddressId], references: [id])
  shippingAddress  Address?     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}


model Address {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  street    String?
  city      String?
  postal    String?
  country   String?
  phone     String?
  
  defaultAddressOf User? @relation("DefaultAddress")
  shippingAddressOf User? @relation("ShippingAddress")

  createdAt DateTime  @default(now())
}

model ProductCategory{
  id           String  @id @default(cuid())
  name         String  @unique
  products     Product[] 
  image        String?
  slug         String? @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product{
  id                          String @id @default(cuid())
  name                        String  @unique
  description                 String?
  isPublished                 Boolean?  @default(true)
  price                       Float
  stock                       Int
  brand                       String?
  warrenty                    String?
  dimensions                  String?
  images                      String[]
  colorOptions                String[]
  weight                      String?
  material                    String?
  cartItems                   CartItem[]
  orderItems                  OrderItem[]
  wishlist                    WishlistItem[]

  categoryId                  String
  category                    ProductCategory @relation(fields: [categoryId],references: [name])

  reviews                     Review[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Review {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int?
  description String?

  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart{
  id           String     @id @default(cuid())
  userId       String     @unique
  user         User       @relation(fields: [userId],references: [id])
  items        CartItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id         String      @id @default(cuid())
  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])
  total      Float
  items      OrderItem[]
  payment    Payment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id             String      @id @default(cuid())
  orderId        String
  productId      String
  quantity       Int
  priceAtPurchase Float
  status         OrderStatus @default(PENDING)  

  order          Order       @relation(fields: [orderId], references: [id])
  product        Product     @relation(fields: [productId], references: [id])
}

model Payment {
  id        String    @id @default(cuid())
  orderId   String
  method    String
  status    String
  amount    Float

  order     Order     @relation(fields: [orderId], references: [id])
  createdAt DateTime  @default(now())
}

model Wishlist {
  id        String    @id @default(cuid())
  userId    String   @unique
  user      User      @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id        String    @id @default(cuid())
  wishlistId String
  productId  String  @unique

  wishlist   Wishlist  @relation(fields: [wishlistId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
}

